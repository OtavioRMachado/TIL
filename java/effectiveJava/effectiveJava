ITEMS:
1. Consider static factory methods instead of constructors
2. Consider a Builder when facing an object creation with multiple (optional) parameters
3. Enforce the Singleton property with a private constructor or with an ENUM class
4. Enforce noninstantiability with a private constructor
5. Avoid creating unnecessary objects
6. Eliminate obsolete object references
7. Avoid finalizers
8. Obey the general contract when overriding equals

Consider static factory methods instead of constructors.
example: 
public static Boolean valueOf(boolean b) {
        return b ? Boolean.TRUE : Boolean.FALSE;
}

Advantages:
1. They have names: This means that it improves readability. If you have multiple ways of creating an object, it's best if you relate each way of creating it with a different name than just with a set of parameters that should be passed to the constructor.
2. They don't always have to create a new object when they are called: Whenever you call a constructor, you will ALWAYS create a new object. If you use a static factory method, you have the choice of just returning an existing instance - if it is what is being asked - of that object. Imagine you need to create two $5 dollar bills. You don't need to create two different objects for that - if they are value objects - you can return the same instance of that $5 bill to both calls.
3. They can return objects of any subtype of their return type: When you call a constructor, you will return an object of the constructor's type. If you use a factory method and you have a subclass for the class you're creating a method, you can also return objects of that subtype.
4. They reduce the verbosity of creating parameterized type instances. 

Disadvantages:
1. Classes that provide only static factory methods - without constructors - cannot be subclassed. This could be a blessing in disguise, as it encourages programmers to use composition instead of inhearitance.
2. They are not distinguishable from other static methods - so you don't know which ones are the constructors and which ones are not.

In summary, static factory methods and public constructors BOTH have their uses, and it pays to understand their relative merits.
OFTEN, FACTORIES ARE PREFERABLE, so avoid the reflex to provide public constructors WITHOUT FIRS CONSIDERING STATIC FACTORIES.

Consider a builder when faced with many constructor parameters.
Builder - Useful to create objects with various optional characters.
Disadvantages: You have to create a builder to create an object. In performance-critical situations, this could be a problem. It is also more verbose.
Telescoping constructor pattern - Another alternative, where you have multiple constructors. First one with all of the required parameters and then one more for each aditional parameter that is optional.
Disadvantage: Lots of constructors. The more optional fields, the easier it gets out of hand. You still have to fill optional parameters with zeroes.
JavaBeans pattern (setters) - When you have an empty constructor and setters for all parameters. 
Disadvantage: You may have an object in an inconsistent state, you have to write lots of lines of code to set up your object. It also makes the class mutable. =(
In summary: The builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters, especially if those parameters are optional.

ENFORCE THE SINGLETON PROPERTY WITH A PRIVATE CONSTRUCTOR OR AN ENUM TYPE

Singleton: A class that is instantiated exactly once.

// Singleton with static factory
public class Elvis {
        private static final Elvis INSTANCE = new Elvis();
        private Elvis() { ... }
        public static Elvis getInstance() { return INSTANCE; }

        public void leaveTheBuilding() { ... }
}

A Single-element enum type is the best way to implement a singleton.
public enum Elvis {
        INSTANCE;

        public void leaveTheBuilding() { ... }
}
This works with serialization, is more concise.

ENFORCE NONINSTANTIABILITY WITH A PRIVATE CONSTRUCTOR
Having non instantiable classes is useful. You can join lots of methods and have an auxiliar class just like java.lang.Math. It's nonsensical to create a constructor for such classes, and if you don't define one, Java will, by default, define that there is a constructor that receives no arguments to build the object. If you make the class abstract, you can still subclass it. It's better to create a private constructor, to make sure that the class will not be able to instantiated.

// Noninstantiable utility class
public class UtilityClass {
        // Suppress default constructor for noninstantiability
        private UtilityClass() {
                throw new AssertionError();
        }
        ... // Remainder omitted

5. AVOID CREATING UNNECESSARY OBJECTS
        É geralmente mais apropriado reutilizar um único objeto ao invés de criar um objeto novo com funcionalidades equivalentes cada vez que isso é preciso. Reutilização pode ser tanto mais rápida quanto mais estilosa. Um objeto pode sempre ser reutilizado se for imutável (15)
        Como um exemplo extremo do que NÃO fazer, temos:
        String s = new String("stringette"); // DON'T DO THIS!

        O comando acima cria uma nova instância de String sempre que for executado, e nenhuma criação de objeto é necessária. O argumento para o construtor da string "stringette" já é uma instância de String, cuja funcionalidade é idêntica a todos os objetos criados por esse construtor. Se esta utilização ocorre em um loop ou em um método frequentemente invocado, milhões de instâncias de String podem ser criadas sem necessidade.
        A versão melhorada é simplesmente a seguinte:
        String s = "stringette";

        Esta versão utiliza uma única instância de String, ao invés de criar uma nova toda vez que for executada. Além do mais, é garantido que o objeto será reutilizado por qualquer outro código rodando na mesma máquina virtual que contém o mesmo literal String  que contiver o mesmo literal String.
        Você pode geralmente evitar criar objetos desnecessários utilizando métodos de factory estáticos (1) ao invés de construtores, em classes imutáveis que disponibilizem dois. Por exemplo, o método Boolean.valueOf(String) é quase sempre preferível ao invés do construtor Boolean(String). O construtor cria um novo objeto sempre que for chamado, enquanto a factory estática nunca precisa fazê-lo e não o vai, na prática.
        Adicionalmente a reutilização de objetos imutáveis, você tabém pode reutilizar objetos mutáveis se você sabe que eles não serão modificados. Aqui há um exemplo um pouco mais sutil e muito mais comum do que não fazer. Ele envolve objetos Date mutáveis que nunca são modificados uma vez que forem computados. Essa classe modela uma pessoa e tem um método isBabyBoomer que diz se a pessoa é um "baby boomer", ou seja, em outras palavras ,se a pessoa nasceu entre 1946 e 1964:

        public class Person {
                private final Date birthDate;

                // Outros campos, métodos e construtor omitidos

                // NÃO FAÇA ISSO
                public boolean isBabyBoomer() {
                        // alocação desnecessária de um objeto caro
                        Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
                        gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
                        Date boomStart = gmtCal.getTime();
                        gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
                        Date boomEnd = gmtCal.getTime();
                        return birthDate.compareTo(boomStart) >= 0 && birthDate.compareTo(boomEnd) < 0;
                }
        }
        O método isBabyBoomer criou desnecessariamente um novo Calendar, TimeZone e duas instâncias de Date cada vez que é invocada. A versão que segue evita essa inefiiência com um inicializador estático:

6. ELIMINATE OBSOLETE OBJECT REFERENCES
        Quando a gente vem de linguagens onde somos obrigados a lidar com gerenciamento da memória, como C e C++, nos acostumamos a deletar os objetos que criamos. Em linguagens como o Java, que possuem um Garbage Collector, às vezes não entendemos propriamente seu funcionamento e esperamos que a "mágica" aconteça sempre que não usamos mais um objeto. Isso é verdade para grande parte dos casos, mas existem momentos onde o Garbage Collector não consegue saber se deve ou não deletar uma instância de objeto e, com o tempo, a aglomeração desses objetos que ficam no "limbo" irão diminuir a performance da aplicação que está rodando. Os casos mais comuns são os seguintes:

When a Class manages its own memory, the programmer should be alert for memory leaks.
        Um exemplo que o livro dá é quando usamos um array de tamanho variável como uma pilha e, quando usamos "pop", diminuimos o tamanho do array e retornamos o resultado do valor que estava na ponta. Como não explicitamente definimos que, naquela posição do array, não queremos mais a instância do objeto que foi "popped", o Garbage Collector não sabe que aquele objeto não será mais utilizado e o mantém.
Another common source of memory leaks is caches.
        A argumentação está no fato de que, por ser um hashmap, é muito comum esquecermos de apagar essa relação entre objetos e a cache, fazendo com que ela fique guardando vários dados obsoletos.
A third common source of memory leaks is listeners and other callbacks.
        Se você implementar uma API onde os clientes registram callbacks e não as desregistram explicitamente, elas irão acumular a não ser que você faça algo sobre isso. Uma solução é armazenar apenas referências fracas (weak references) delas, usando por exemplo um WeakHashMap.

7. AVOID FINALIZERS
        Finalizers são difíceis de se prever, geralmente perigosos e geralmente desnecessários.
        Em Java, pode levar um tempo longo entre o momento em que um objeto não é mais alcançavel até o seu finalizer ser executado. Isso significa que você nunca deve fazer nada que seja time-critical em um finalizer.
        If an uncaught exception is thrown in a Finalizer, the exception is ignored and the finalization terminates. This can leave objects in a corrupt state.
        It takes a long time to use objects with finalizers. (About 430 times slower)
        You have to explicitly call finalize methods from superclasses.
        What is it good for? 
        - Guaranteeing freeing of resources (better impredictabily late than never) if someone forgets to, but remember to log a warning. 
        - It's good for deleting native peers (objects that the original object delegates things to)

8. OBEY THE GENERAL CONTRACT WHEN OVERRIDING EQUALS
        É, geralmente, bem fácil fazer um override do Equals que dá errado. Por isso, a sugestão inicial é: não faça override. Essa sugestão se aplica aos seguintes casos:
        - Cada instância da sua classe é inerentemente única;
        - Você não se importa se a classe provê um teste de igualdade lógica;
        - Uma superclasse já substituiu o equals e o comportamento dela é apropriado para esta classe;
        - A classe é privada ou privada para um pacote, e você tem certeza que seu método equals nunca será chamado.
        (neste caso, talvez o melhor seja dar override e dar throw numa exceção lá dentro)

        Ou seja, em grande parte, o equals deve ser sobrescrito para "value objects". E, para isso, é importante seguir o contrato do equals:
        Ele implementa uma relação de equivalência. Ela é:
        - Reflexiva: Para qualquer referência não null x, x.equals(x) PRECISA retornar true;
        - Simétrica: Para quaisquer referências não-null x e y, x.equals(y) deve retornar true se e somente se y.equals(x) retornar true;
        - Transitiva: Para quaisquer referências não null x, y e z, se x.equals(y) = true e y.equals(z) = true, então x.equals(z) deve ser true;
        - COnsistente: Múltiplas invocações de x.equals(y) devem sempre retornar ou true ou false.
        - Para qualquer referência não-null x, x.equals(null) deve retornar falso.
        
        Há uma lista de coisas para se pensar para um método equals de boa qualidade
        1. Use o operador == para checar se o argumento é uma referência a este objeto.
        2. Use instanceof para chegar se o argumento tem o tipo certo.
        3. Transforme o argumento para o tipo correto
        4. Para cada campo significativo da calsse, verifique se o valor dele no argumento é igual ao do campo deste objeto
        5. Quando terminar de escrever o equals, pergunte-se: é simétrico? É transitivo? É consistente?

        - Sempre sobrescreva hashcode quando sobrescrever equals;
        - Não tente ser um espertinho
        - Não substitua outro tipo por Object na declaração do equals


