There's a hierarchy on where to get the properties and attributes from. (It starts by command line and goes until Spring default properties, but there are like 10 levels of hierarchy, passing through SPRING_APPLICATION_JSON, .properties files and etc.)

The SPRING_APPLICATION_JSON can be supplied via command-line with an environment variable.
You can also set the JSON ina system argument or a command-line argument, or even as a JNDI (Java Naming and Directory Interface) variable.

You can generate random values in the property files using the RandomValuePropertySource
        example: my.secret = ${random.value}
        (instead of value, you can use int, long, int(MAX) or int[MIN,MAX])

By default, springboot will convert any command line option starting by '--' to a property and add it to the Spring environment.

SpringApplication will look for an application.properties file and load it automatically (you can also use YAML)
You can change the properties file name specifying a spring.config.name environment property and change its location with spring.config.location.

Profile Specific files: 
        application-{profile}.properties - If no profiles are explicitely ativated, then properties from application-default.properties are loaded.
        To activate a profile, use spring.profiles.active property.

Placeholders
        You can reause values set before in your new property
        app.name = MyApp
        app.description = ${app.name} is a Spring Boot application.

Using YAML
        SpringApplication will automatically support YAML as an alternative if you have the SnakeYAML library on your classpath (spring-boot-starter starter pom already adds this library as a dependency)
        To set multiple profiles in YAML, use spring.profiles attribute.
        YAML CAN'T be loaded using @PropertySource annotation. To load values that way, you will need a properties file.

24.7 Type-safe Configuration Porperties
@Value("${property}") é usada para injetar propriedades de configuração.

@EnableConfigurationProperties is automatically applied to your project so that any beans annotated with @ConfigurationProperties will be configured from the Environment properties. This style of configuration works particularly well with the SpringApplication external YAML configuration:

# application.yml

connection:
        username: admin
        remoteAddress: 192.168.1.1

# additional configuration as required

To work with @ConfigurationProperties beans you can just inject them in the same way as any other bean.

@Service
public class MyService {
        
        @Autowired
        private ConnectionSettings connection;

        @PostConstruct
        public void openConnection() {
                Server server = new Server();
                this.connection.configure(server);
        }
}

Um atalho para registrar as definições de registro de @ConfigurationProperties é listar as classes de propriedades diretamente na anotação @EnableConfigurationProperties
@Configuration
@EnableConfigurationProperties(ConnectionSettings.class)
public class MyConfiguration {
}

Quando o bean do @ConfigurationProperties for registrado assim, o bean terá um nome seguindo a convenção <prefixo>-<fqn>, onde <prefixo> é o prefixo da chave de ambiente especificada na anotação @ConfigurationProperties e <fqn> é o o nome completamente qualificado do bean. Se a anotação não provê nenhum prefixo, apenas o nome completamente qualificado do bean será usado.
O nome do bean do exemplo acima será connection-com.example.ConnectionSettings, assumindo que o COnnectionSettings fica no pacote com.example.

Usar o @ConfigurationProperties também permite que você gere arquivos de meteadados que possam ser usados por IDEs.

Se for necessário fazer conversão personalizada de tipo de dados do arquivo de propriedades, ocê pode definir um bean ConversionService, ou editores dep ropriedades personalizados (CustomEditorConfigurer) ou Converters personalizaos (com definições de bean anotadas como @ConfigurationPropertiesBinding)

25. Profiles
é um jeito de separar partes da configuração de uma aplicação e disponibilizá-las apenas para certos ambientes. Um @Componente ou @Configuration pode ser marcado com @Profile, pra definir quando ele deve ser carregado.
Pra definir quais ambientes estão ativos, pode-se fazer:
spring.profiles.active = dev, hsqldb
ou por argumento de linha de comando, com --spring.profiles.active = dev, hsqldb.

spring.profiles: prod
spring.profiles.include: proddb, prodmq

26. Logging
Configurações padrão são providenciadas para o Java Util Logging, Log4J2 e Logback. 
O padrão pai de oodos é que se use Logback. 

O padrão de formato dos logs tem as seguintes informações: timestamp, nível de log (error, warn, info, debug, drace), o ID do processo, um separador, o nome da thread, o nome do logger e a log message.

Você pode forçar o spring a usar um sistema de log usando a propriedade org.springframework.boot.logging.LoggingSystem. As opções para ela são Logback, Log4j2 ou JDK.

27. Developing Web Applications
@Controller e @Restontroller são anotaçòes que criam beans para lidar com HTTP Requests. Os métodos do controller são mapeados para HTTP usando anotações @RequestMapping
Exemplo

@RestController
@RequestMapping(value="/users")
public class MyRestController {
        @RequestMapping(value="/{user}", method=RequestMethod.GET)
        public User getUser(@PathVariable Long user) {
        }

        @RequestMapping(value="/{user}/customers", method=RequestMethod.GET)
        public List<Customer> getUserCustomers(@PathVariable Long user) {
        }

        @RequestMapping(value="/{user}", method=RequestMethod.DELETE)
        public User deleteUser(@PathVariable Long user) {
        }
}

Spring MVC auto-configuration.
        SpringBoot gera várias coisas automaticamente, além dos padrões que o SPRING dá:
        ContentNegotiatingViewResolver e BeanNameViewResolver beans;
        Suporte a servir recursos estáticos, incluindo suporte para WebJars
        Registro automatico de COnverter, GenericConverter e Formatters,
        Suporte a HttpMessageConverters
        Registro autometico de MessageCodesResolver
        Suporte a index.html estático
        Suporte a um Favicon padrão
        Uso automático de um ConfigurableWebBindingInitializer

Se quiser ter controle completo do Spring MVC, você pode adicionar seu próprio @Configuration anotado com @EnableWebMvc. Se você quiser manter as features citadas acima, apenas adicionando mais configurações, você pode adicionar seus próprios @Beans do tipo WebMvcConfigurerAdapter, mas SEM@EnableWebMvc.

HttpMessageConverters
        É uma interface que o Spring MVC usa para converter requests e responses HTTP. Padrões sensíveis são incluídos por padrão, como por exemplo, Objetos podem ser convertidos automaticamente para JSON (usando Jackson) ou XML (usando Jackson XML se houver, senão usando JAXB). Strings são encodadas usando o padrão UTF-8.
        Se você precisar adicionar ou customizar conversores você deve usar a classe HttpMessageConverters.
Exemplo:
import org.springframework.boot.autoconfigure.eb.HttpMesageConverters;
import org.springframework.context.annotation.*;
import org.springframework.http.converter.*;

@Configuration
public class MyConfiguration {
        @Bean
        public HttpMessageConverters customConverters() {
                HttpMessageConverter<?> additional = ...
                HttpMessageConverter<?> another = ...
                return new HttpMessageConverters(additional, another);
        }
}

-> Custom JSON Serializers and Deserializers (JsonSerializer, @JsonComponent) or JsonObjectSerializer JsonObjectDeserializer.

-> MessageCodesResolver - Estratégia de geração de códigos de erro. O Spring Boot cria um pra você se você setar spring.mvc.message-codes-resolver.format PREFIX_ERROR_CODE ou POSTFIX_ERROR_CODE.

-> Conteúdo Estático (27.1.5)
        Por padrão, o Spring Boot vai servir o conteúdo estático de um diretório chamado /static (ou /public, ou /resources, ou ainda /META-INF/resources) no classpath ou da raiz do ServletContext. Ele usa o ResourceHttpRequestHandler do Spring MVC para que você possa modificar aquele comportamento adicionando seu próprio WebMvcConfigurerAdapter e sobreescrever o método addResourceHandlers.
        É possível customizar a localização do conteúdo estático, colocando o caminho na propriedade spring.resources.staticLocations
        Há um caso de tratamento especial para conteúdo de WebJars. Quaisquer recursos que estiverem em /webjars/** serão servidos dos arquivos jar que estiverem empacotados no formato Webjar.
        Há uma forma de definir que algumas partes do conteúdo estático que são carregados na aplicação de forma versionada. Por exemplo, se quisermos que o conteúdo javascript localizado em /js/lib seja carregado sempre em uma versão específica, enquanto o resto do conteúdo é carregado o mais atual, podemos usar:
        spring.resources.chain.strategy.content.enabled=true
        spring.resources.chain.strategy.content.paths=/**
        spring.resources.chain.strategy.fixed.enabled=true
        spring.resources.chain.strategy.fixed.paths=/js/lib/
        spring.resources.chain.strategy.fixed.version=v12

-> ConfigurableWebBindingInitializer
        O Spring MVC utiliza um WebBindingInitializer para inicializar o WebDataBinder para um request. Se você criar seu próprio bean ConfigurableWebBindingInitializer, o Spring Boot vai automaticamente configurar o Spring MVC para utilizá-lo.

-> Template Engines (27.1.7)
        O Spring MVC também pode ser usado para servir conteúdo HTML dinâmico. O framework tem suporte out of the box para tecnologias como Velocity, FreeMarker e JSPs. Outras tecnologias possuem suas prórpias integrações com o Spring, mas o Spring-boot tem configuração automática para as seguintes tecnologias:
                - FreeMarker
                - Groovy
                - Thymeleaf
                - Velocity
                - Mustache
                Quando você usar as configurações padrão para alguma dessas tecnologias, o conteúdo estático será buscado em src/main/resources/templates

-> Lidando com Erros (27.1.8)
        O spring-boot, por padrão, cria um endpoint /error que lida com erros graciosamente. Para clientes-máquina, ele irá produzir um JSON com os detalhes do erro, o HTTP Status e a mensagem de exception, enquanto que para clientes browser ele irá gerar um HTML com as mesmas informações. 
        Para substituir o comportamento padrão completamente, pode-se implementar o ErrorController ou adicionar um bean do tipo ErrorAttributes para utilizar o mesmo mecanismo, mas substituir o seu conteúdo.
        Dica: Pode-se usar o BasicErrorController como base para um ErrorController personalizado. 
        Também há formas de ter um ErrorHandler para algum pacote específico da aplicação, ou páginas personalizadas para serem retornadas quando há algum erro, como 404, 403 e tal.

-> Spring HATEOAS - Hypermedia as the Engine of Application State (27.1.9)

O que é HATEOAS?
        É uma limitação da arquitetura REST que a diferencia das outras arquiteturas de rede. Se baseia no princípio de que um cliente interage com uma aplicação de rede inteiramente através da hipermídia providenciada dinamicamente pelos servidores de aplicação. Um cliente REST não precisa de nenhum conhecimento prévio sobre como interagir com qualquer aplicação ou servidor em particular além de ter um conhecimento genérico de hipermídias. 

O Spring-Boot provê autoconfiguração para HATEOAS que funciona bem com quase todo tipo de aplicações. Com a autoconfiguração não se torna mais necessário usar @EnableHypermediaSupport e registrar um número de beans para facilitar a construção de aplicações baseadas em hipermídia, incluindo um LinkDiscoverers e um ObjectMapper configurado para parsear respostas na representação desejada.

Você pode controlar a configuração do HATEOAS no Spring utilizando a anotação @EnableHypermediaSupport.

-> Suporte a CORS (27.1.10)
        CORS - Cross-Origin resource sharing é uma especificação da W3C implementada por grande parte dos browsers que te permite especificar, de uma forma flexúvel, que tipo de requisições cross-domain estão autorizadas, ao invés de utilizar outros approaches menos seguros e poderosos, como IFRAME e JSONP.
        Desde a versão 4.2, o Spring MVC suporta o CORS. Não é necessário adicionar nenhuma configuração específica utilizando @CrossOrigin annotations no SpringBoot. A configuração global de CORS pode ser definida ao registrar um bean WebMvcConfigurer com um método personalizado addCorsMappings(CorsRegistry)

-> JAX-RS e Jersey (27.2)
        Se você preferir o modelo de programação JAX-RS para endpoints REST, você pode usar uma das implementações disponíveis ao invés do Spring MVC. Jersey 1.x e Apacher CXF funcionam por padrão muito bem se você registrar seus Servlet ou Filter como @Beans do contexto da sua aplicação. Jersey 2.x já veio com algum suporte nativo a Srping, então nós também providenciamos autoconfigurações no Srpingboot, junto com um starter para ele. 
        Para usar Jersey 2.x, apenas inclua spring-boot-starter-jersey como uma dependência e então você só precisará de um @Bean do tipo ResourceConfig que é onde você registrará todos seus endpoints.

@Component
public class JerseyConfig extends ResourceConfig {
        
        public JerseyConfig() {
                register(Endpoint.class);
        }
}

Você também pode registrar um número qualquer de beans implementando o ResourceConfigCustomizer para personalizações mais avançadas.
Todos os endpoints registrados devem ser @Components com anotações de recursos HTTP (como @GET), exemplo:

@Component
@Path("/hello")
public class Endpoint {
        @GET
        public String message() {
                return "Hello";
        }
}

-> Suporte a container de Servlet embutido
        SpringBoot dá suporte para servidores Tomcat, Jetty e Undertow. Grande parte dos desenvolvedores simplesmente usará o Starter POM apropriado par aobter uma instância completamente configurada. Por padrão, o servidor embutido irá ouvir os HTTP requests na porta 8080.

-> Servlets, Filters e listeners (27.3.1)

Registrar Servlets, Filters e listeners como beans do Spring
        Qualquer instância que for um Spring bean será registrada no container embutido. Isso pode ser conveniente se você quiser se referir a um valor do seu application.properties durante a configuração.
        Por padrão, o contexto só tem um único servlet que é mapeado para o /. No caso dem ultiplos Servlet beans, o nome do bean será usado como um prefixo do path. Filters serão mapeados para /*
        Se isso não for flexível o suficiente, pode-se usar ServletRegistrationBean, FilterRegistrationBean e ServletListenerRegistrationBean para controle completo deles.

-> Inicialização do contexto de um Servlet (27.3.2)
        Para servlets embutidos, o Spring não vai executar automaticamente a interface ServletContainerInitializer, ou a interface WebApplicationInitializer do Spring. Isso foi feito para reduzir o risco de que bibliotecas externas que foram feitas pra rodar dentro de um war quebrem as aplicações Spring Boot. Se for necessário realizar a inicialização do contexto de um Servlet, você pode registrar um bean que implemente a interface ServletContextInitializer.

-> Escanear Servlets, Filters e Listeners
        Quando usar um container embutido, o registro automático de classes anotadas com @WebServlet, @WebFilter, @WebListener pode ser habilitado usando @ServletComponentSCan.

-> O EmbeddedWebApplicationContext (27.3.3)
        É um novo tipo de ApplicationContext para apoiar servlet containers embutidos. É um tipo especial de WebApplicationContext que se inicializa buscando por um bean EmbeddedServletContainerFactory. Jetty, Tomcat ou Undertow estarão autoconfigurados.

-> Customizando embedded servlet containers (27.3.4)
        Suas configuraçòes podem ser colocadas nas propriedades de ambiente do Spring (application.properties).
        Configurações comuns são:
        - Configurações de Rede: Porta para ouvir HTTP requests (server.port), endereço de interface para ligar-se a server.address, etc.
        - Configurações de Sessão: Se a sessão é persistente ou não (server.session.persistence), timeout de sessão (server.session.timeout), localização dos dados de sessão (server.session.store-dir) e configuração session-cookie (server.session.cookie.*)
        - Gerenciamento de erros: Localização da página de erro (server.error.path), etc
        - SSL
        - Compressão HTTP
        O SpringBoot tenta expor as configurações em comum, mas isso não é sempre possível. Para estes casos, há namespaces dedicados para customizações específicas de um servidor (veja server.tomcat e server.undertow).

        Customização de forma programática
        Você pode registrar um bean do Spring que implemente a interface EmbeddedServletContainerCustomizer.

        Customização diretamente do ConfigurableEmbeddedServletContainer
        Você pode registrar o bean TomcatEmbeddedServletContainerFactory / Jetty... / Undertow... você mesmo.

        Setters provêem muitas opções de configuração.

-> Limitações do JSP
        Quando rodar uma aplicação Spring que usa um embedded servlet container (e estiver empacotado como um arquivo executável), há algumas limitações no suporte a JSP.
        - Com o TomCat deve funcionar se você utilizar empacotamento war. Um jar não irá funcionar por causa de um padrão de arquivos hard coded no Tomcat
        - Jetty não funciona como um container embutido com JSPs
        - Undertow não suporta JSPs
        Há um exemplo de JSPs para você ver como configurar as coisas.

----------------------> SEGURANÇA 
        Se "Spring Security" estiver no seu classpath, então as aplicações web estarão seguras por padrão com autenticação básica em todos os endpoints HTTP. Para adicionar segurança a nível de métodos a uma aplicação web, é possível adicionar @EnableGlobalMethodSecurity às suas configurações desejadas. Mais informações podem ser encontradas no manual de referência de Segurança do Spring.
        O AuthenticationManager padrão tem um único usuário (Onde o nome do usuário é 'user' e o password é aleatório, impresso a nível de INFO quando a aplicação começa a rodar)

        Você pode mudar esta senha provendo um security.user.password.
        A implementação das configurações padrão acontece em SecurityAutoConfiguration a nas classes importadas dela (SpringBootWebSecurityConfiguration, AuthenticationManagerConfiguration). Para desligar o padrão, adicione um bean com @EnableWebSecurity (Isso não desabilita o AuthenticationManagerConfiguration). Para customizá-lo geralmente se usam properties externas e beans do tipo WebSecurityConfigurerAdapter (por exemplo, pra adicionar login baseado em forms). Para desligar tudo, adicione um bean do tipo AuthenticationManager ou configure o AuthenticationManager autowiring um AuthenticationManagerBuilder em um método de uma das suas classes @Configuration.

        As funcionalidades que você ganha de botija em uma aplicação web são:
        - Um bean AuthenticationManager com armazenamento em memória e um único usuário (veja SecurityProperties.user para as propriedades do usuário)
        - Caminhos ignorados (inseguros) para localizações de recursos estáticos (/css/**, /js/**, /images/**, ...)
        - Segurança básica para todos os endpoints HTTP
        - Eventos de segurança publicados no ApplicationEventPublisher do Spring (autenticações com sucesso, sem sucesso e acesso negado)
        - Funcionalidades comuns de baixo nível (HSTS, XSS, CSRF, caching) providas pelo Spring Security são ativadas por padrão.
        Mas todas acima podem ser ligadas ou desligadas usando propriedades externas (security.*). Para sobrescrever as regras de acesso sem mudar qualquer outra funcionalidade autoconfigurada adicione um bean do tipo WebSecurityConfigurerAdapter com @Order(SecurityProperties.ACCESS_OVERRIDE_ORDER).

-> OAuth2 (28.1)

        
